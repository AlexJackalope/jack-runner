class SquareGame {
   field Square square; // the square of this game
   field int direction; // the square's current direction: 
                        // 0=none, 1=up, 2=down, 3=left, 4=right
   field int iterationsToNewWall;
   field int wallType;
   field int inJumpForIterations;
   field int inUnderForIterations;
    field SimpleWall upperWall, upperWall1, upperWall2;
    field SimpleWall lowerWall, lowerWall1, lowerWall2;
    field JumpWall jumpWall, jumpWall1, jumpWall2;
    field UnderWall underWall, underWall1, underWall2;
    field int randPos;

   /** Constructs a new square game. */
   constructor SquareGame new() {
      // The initial square is located in (0,0), has size 30, and is not moving.
      let square = Square.new(0, 0, 30);
      do LCGRandom.setSeed(10);
      let direction = 0;
      let iterationsToNewWall = 100;
      let inJumpForIterations = 0;
      let inUnderForIterations = 0;
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do square.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSquare() {
      if (direction = 1) { do square.moveUp(); }
      if (direction = 2) { do square.moveDown(); }
      if (direction = 3) { do square.moveLeft(); }
      if (direction = 4) { do square.moveRight(); }
      if (inJumpForIterations > 10) { do square.jump(); }
      if (inUnderForIterations > 10) { do square.under(); }
      return;
   }

    method void moveWall() {
      var boolean wallMoved;
      if (~(upperWall = null))
      {
         let wallMoved = ((upperWall.tryMove()) & (lowerWall.tryMove()));
         if (~(wallMoved)) { do upperWall.dispose(); let upperWall = null; do lowerWall.dispose(); let lowerWall = null; }
      }
      if (~(upperWall1 = null))
      {
         let wallMoved = upperWall1.tryMove() & lowerWall1.tryMove();
         if (~(wallMoved)) { do upperWall1.dispose(); let upperWall1 = null; do lowerWall1.dispose(); let lowerWall1 = null; }
      }
      if (~(upperWall2 = null))
      {
         let wallMoved = upperWall2.tryMove() & lowerWall2.tryMove();
         if (~(wallMoved)) { do upperWall2.dispose(); let upperWall2 = null; do lowerWall2.dispose(); let lowerWall2 = null; }
      }
      if (~(jumpWall = null))
      {
         let wallMoved = jumpWall.tryMove();
         if (~(wallMoved)) { do jumpWall.dispose(); let jumpWall = null; }
      }
      if (~(jumpWall1 = null))
      {
         let wallMoved = jumpWall1.tryMove();
         if (~(wallMoved)) { do jumpWall1.dispose(); let jumpWall1 = null;}
      }
      if (~(jumpWall2 = null))
      {
         let wallMoved = jumpWall2.tryMove();
         if (~(wallMoved)) { do jumpWall2.dispose(); let jumpWall2 = null; }
      }
      if (~(underWall = null))
      {
         let wallMoved = underWall.tryMove();
         if (~(wallMoved)) { do underWall.dispose(); let underWall = null; }
      }
      if (~(underWall1 = null))
      {
         let wallMoved = underWall1.tryMove();
         if (~(wallMoved)) { do underWall1.dispose(); let underWall1 = null; }
      }
      if (~(underWall2 = null))
      {
         let wallMoved = underWall2.tryMove();
         if (~(wallMoved)) { do underWall2.dispose(); let underWall2 = null; }
      }            
      do Sys.wait(25);  // по сути скорость игры. Чем меньше, тем игра быстрее
      return;
   }

   method void createLineOfWalls()
   {
      var SimpleWall upWall, lowWall; 
      let randPos = LCGRandom.randRange(1, 184);
      let upWall = SimpleWall.new(500, 0, 10, randPos);
      let lowWall = SimpleWall.new(500, randPos + 70, 10, (185 - randPos));
      if (upperWall = null) { let upperWall = upWall; let lowerWall = lowWall; return; }
      if (upperWall1 = null) { let upperWall1 = upWall; let lowerWall1 = lowWall; return; }
      if (upperWall2 = null) { let upperWall2 = upWall; let lowerWall2 = lowWall; return; }
      return;
   }

   method void createJumpWall()
   {
      var JumpWall jmpWall;
      let jmpWall = JumpWall.new(500, 0, 16, 255);
      if (jumpWall = null) { let jumpWall = jmpWall; return; }
      if (jumpWall1 = null) { let jumpWall1 = jmpWall; return; }
      if (jumpWall2 = null) { let jumpWall2 = jmpWall; return; }
      return;
   }

   method void createUnderWall()
   {
      var UnderWall undrWall;
      let undrWall = UnderWall.new(500, 0, 16, 255);
      if (underWall = null) { let underWall = undrWall; return; }
      if (underWall1 = null) { let underWall1 = undrWall; return; }
      if (underWall2 = null) { let underWall2 = undrWall; return; }
      return;
   }

   method void createNewWall()
   {
      let wallType = LCGRandom.randRange(0, 2);
      if (wallType = 0) {
         do createLineOfWalls();
      }
      if (wallType = 1) {
         do createJumpWall();
      }
      if (wallType = 2) {
         do createUnderWall();
      }
      return;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit, isCollided;
      let exit = false;
      let isCollided = false;
      
      while (~exit) {
         let key = Keyboard.keyPressed();
         if (iterationsToNewWall = 100) 
         {
            do createNewWall();
            let iterationsToNewWall = 0;
         }
         let iterationsToNewWall = iterationsToNewWall + 1;
         if (inJumpForIterations > 0) { let inJumpForIterations = inJumpForIterations - 1; }
         if (inUnderForIterations > 0) { let inUnderForIterations = inUnderForIterations - 1; }
         do moveWall();
         if (~(isCollided))
         {
            do moveSquare();
            
            // let direction = 0;
            let isCollided = 
            checkCollision(square, upperWall) | checkCollision(square, lowerWall) |
            checkCollision(square, upperWall1) | checkCollision(square, lowerWall1) |
            checkCollision(square, upperWall2) | checkCollision(square, lowerWall2);
            
            if (inJumpForIterations < 10) {
               let isCollided = isCollided | 
               checkCollision(square, jumpWall) |
               checkCollision(square, jumpWall1) |
               checkCollision(square, jumpWall2);
            }
            if (inUnderForIterations < 10) {
               let isCollided = isCollided | 
               checkCollision(square, underWall) |
               checkCollision(square, underWall1) |
               checkCollision(square, underWall2);
            }
         }
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow
         if ((key = 32) & (isAbleToAction())) { let inJumpForIterations = 50; } // space to jump
         if ((key = 90) & (isAbleToAction())) { let inUnderForIterations = 50; } // Z to under
     } 
     return;
   }

   method boolean isAbleToAction()
   {
      return ((inJumpForIterations = 0) & (inUnderForIterations = 0));
   }

   // Наследования не завезли, но можно арбузить вот так, если есть подходящие методы и поля
   method boolean checkCollision(Square player, SimpleWall someWall) {
    var RectangleCollider playerCollider, wallCollider;
    if (someWall = null) { return false; }
    let playerCollider = player.getCollider();
    let wallCollider = someWall.getCollider();
    return playerCollider.isCollided(wallCollider);
   }
}


