class SquareGame {
   field Square square; // the square of this game
   field int direction; // the square's current direction: 
                        // 0=none, 1=up, 2=down, 3=left, 4=right
   field int iterationsToNewWall;
   field int wallType;
   field int inJumpForIterations;
   field SimpleWall wall1;
   field SimpleWall wall2;
   field SimpleWall wall3;
   field JumpWall jumpWall;
   field HoleWall holeWall;
    field int randPos;

   constructor SquareGame new() {
      let square = Square.new(0, 0, 30);
      do LCGRandom.setSeed(10);
      let direction = 0;
      let iterationsToNewWall = 150;
      let inJumpForIterations = 0;
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do square.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSquare() {
      if (direction = 1) { do square.moveUp(); }
      if (direction = 2) { do square.moveDown(); }
      if (direction = 3) { do square.moveLeft(); }
      if (direction = 4) { do square.moveRight(); }
      if (inJumpForIterations > 10) { do square.jump(); }
      return;
   }

    method void moveWall() {
      var boolean wallMoved;
      if (~(wall1 = null))
      {
         let wallMoved = wall1.tryMove();
         if (~(wallMoved)) { do wall1.dispose(); }
      }
      if (~(wall2 = null))
      {
         let wallMoved = wall2.tryMove();
         if (~(wallMoved)) { do wall2.dispose(); }
      }
      if (~(wall3 = null))
      {
         let wallMoved = wall3.tryMove();
         if (~(wallMoved)) { do wall3.dispose(); }
      }
      do Sys.wait(25);  // по сути скорость игры. Чем меньше, тем игра быстрее
      return;
   }

   method void createLineOfWalls()
   {
      var HoleWall holeWall;
      var SimpleWall lowerWall, upperWall;
      let randPos = LCGRandom.randRange(1, 184);
      let upperWall = SimpleWall.new(500, 0, 10, randPos);
      let lowerWall = SimpleWall.new(500, randPos + 70, 10, (185 - randPos));
      let holeWall = HoleWall.new(upperWall, lowerWall);
      if (wall1 = null) { let wall1 = holeWall; return; }
      if (wall2 = null) { let wall2 = holeWall; return; }
      if (wall3 = null) { let wall3 = holeWall; return; }
      return;
   }

   method void createJumpWall() 
   {
      var JumpWall jumpWall;
      let jumpWall = JumpWall.new(500, 0, 16, 255);
      if (wall1 = null) { let wall1 = jumpWall; return; }
      if (wall2 = null) { let wall2 = jumpWall; return; }
      if (wall3 = null) { let wall3 = jumpWall; return; }
      return;
   }

   method void createNewWall()
   {
      let wallType = LCGRandom.randRange(0, 1);
      if (wallType = 0) {
         do createLineOfWalls();
      }
      if (wallType = 1) {
         do createJumpWall();
      }
      return;
   }
   
   method void run() {
      var char key;  
      var boolean exit, isCollided;
      let exit = false;
      let isCollided = false;
      
      while (~exit) {
         let key = Keyboard.keyPressed();
         if (iterationsToNewWall = 150) 
         {
            do createNewWall();
            let iterationsToNewWall = 0;
         }
         let iterationsToNewWall = iterationsToNewWall + 1;
         if (inJumpForIterations > 0) { let inJumpForIterations = inJumpForIterations - 1; }
         do moveWall();
         if (~(isCollided))
         {
            do moveSquare();
            let isCollided = (
            checkCollision(square, wall1) | 
            checkCollision(square, wall2) | 
            checkCollision(square, wall3)); 
         }
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow
         if ((key = 32) & (inJumpForIterations = 0)) { let inJumpForIterations = 50; } // space to jump
     } 
     return;
   }

   // Наследования не завезли, но можно арбузить вот так, если есть подходящие методы и поля
   method boolean checkCollision(Square player, SimpleWall someWall) {
    var boolean isCollided;
    var RectangleCollider playerCollider, wallCollider, additionalWallCollider;
    var int wallType;
    var SimpleWall wall, additionalWall;
    if (someWall = null) { return false; }
    let playerCollider = player.getCollider();
    let wallType = someWall.getType();
    let wall = someWall.getWall();
    let wallCollider = wall.getCollider();
    let isCollided = playerCollider.isCollided(wallCollider);
    if (wallType = 0)
    {
      let additionalWall = someWall.getAdditionalWall(); 
      let additionalWallCollider = additionalWall.getCollider();
      let isCollided = (isCollided | (playerCollider.isCollided(additionalWallCollider)));
    }
    if (wallType = 1)
    {
      let isCollided = (isCollided & (inJumpForIterations < 10));
    }
    return isCollided;
   }
}


