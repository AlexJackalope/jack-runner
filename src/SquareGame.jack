class SquareGame {
   field Square square; // the square of this game
   field int direction; // the square's current direction: 
                        // 0=none, 1=up, 2=down, 3=left, 4=right
    field SimpleWall wall;
    field int randPos;

   /** Constructs a new square game. */
   constructor SquareGame new() {
      // The initial square is located in (0,0), has size 30, and is not moving.
      let square = Square.new(0, 0, 30);
      do LCGRandom.setSeed(10);
      let randPos = LCGRandom.randRange(0, 224);
      let wall = SimpleWall.new(250, randPos, 30);
      let direction = 0;
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do square.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSquare() {
      if (direction = 1) { do square.moveUp(); }
      if (direction = 2) { do square.moveDown(); }
      if (direction = 3) { do square.moveLeft(); }
      if (direction = 4) { do square.moveRight(); }
      do Sys.wait(5);  // delays the next movement
      return;
   }

    method void moveWall() {
      var boolean wallMoved;
      let wallMoved = wall.tryMove();
      if (~(wallMoved))
      {
        let randPos = LCGRandom.randRange(0, 224);
        do wall.erase();
        do wall.dispose();
        let wall = SimpleWall.new(250, randPos, 30);
      }
      do Sys.wait(5);  // delays the next movement
      return;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            do moveWall();
            do moveSquare();
            do checkCollision(square, wall);
         }
         if (key = 81)  { let exit = true; }     // q key
         if (key = 90)  { do square.decSize(); } // z key
         if (key = 88)  { do square.incSize(); } // x key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveWall();
            do moveSquare();
            do checkCollision(square, wall);
         }
     } // while
     return;
   }

   method boolean checkCollision(Square player, SimpleWall someWall) {
    if (((player.getXPos() + player.getSize()) > someWall.getXPos()) & (player.getXPos() < someWall.getXPos())) {
        if (((player.getYPos() + player.getSize()) > someWall.getYPos()) & (player.getYPos() < someWall.getYPos())) {
            do player.erase();
            do dispose();
            return true;
        }
    }
    return false;
   }
}


