class SquareGame {
   field Square square; // the square of this game
   field int direction; // the square's current direction: 
                        // 0=none, 1=up, 2=down, 3=left, 4=right
    field ObstacleLine obstacleLine;
    field int randPos;

   /** Constructs a new square game. */
   constructor SquareGame new() {
      // The initial square is located in (0,0), has size 30, and is not moving.
      let square = Square.new(0, 0, 30);
      do LCGRandom.setSeed(10);
      let direction = 0;
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do square.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSquare() {
      if (direction = 1) { do square.moveUp(); }
      if (direction = 2) { do square.moveDown(); }
      if (direction = 3) { do square.moveLeft(); }
      if (direction = 4) { do square.moveRight(); }
      do Sys.wait(5);  // delays the next movement
      return;
   }

   method void moveObstacleLine() {
      var boolean lineMoved;
      if (obstacleLine = null)
      {
         do createObstacleLine();
      }
      let lineMoved = obstacleLine.tryMove();
      if (~(lineMoved))
      {
        
        do obstacleLine.erase();
        do obstacleLine.dispose();
        do createObstacleLine();
      }
      do Sys.wait(50);  // delays the next movement
      return;
   }

   method void createObstacleLine()
   {
      var SimpleWall wall1, wall2;
      let obstacleLine = ObstacleLine.new(250);
      let randPos = LCGRandom.randRange(30, 226);
      let wall1 = SimpleWall.new(250, 0, 30, randPos);
      let wall2 = SimpleWall.new(250, randPos + 50, 30, (256 - randPos) - 50);
      do obstacleLine.addObstacle(wall1);
      do obstacleLine.addObstacle(wall2);
      return;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit, isCollided;
      let exit = false;
      let isCollided = false;
      
      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            if (~(isCollided))
            {
               do moveSquare();
               let isCollided = checkCollision(square, obstacleLine);
            }
            do moveObstacleLine();
         }
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveObstacleLine();
            if (~(isCollided))
            {
               do moveSquare();
               let isCollided = checkCollision(square, obstacleLine);
            }
         }
     } // while
     return;
   }

   method boolean checkCollisionWithWall(Square player, SimpleWall someWall) {
    var RectangleCollider playerCollider, wallCollider;
    let playerCollider = player.getCollider();
    let wallCollider = someWall.getCollider();
    return playerCollider.isCollided(wallCollider);
   }

   method boolean checkCollision(Square player, ObstacleLine line) {
    var Array colliders;
    var int collidersLength;
    var boolean isCollided;
    let collidersLength = line.getCollidersCount();
    while (collidersLength > 0)
    {
      let collidersLength = collidersLength - 1;
      let isCollided = checkCollisionWithWall(player, colliders[collidersLength]);
      if (isCollided)
         {
            return true;
         }
    }
    return false;
   }
}


